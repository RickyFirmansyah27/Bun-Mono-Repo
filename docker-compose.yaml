version: '3.8'

services:
  elysia-service:
    image: ghcr.io/data-repository/elysia-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/elysia-service/Dockerfile
    container_name: elysia-service
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=myapp
      - DB_SSL=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - bun-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bun", "run", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  hono-service:
    image: ghcr.io/data-repository/hono-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/hono-service/Dockerfile
    container_name: hono-service
    ports:
      - "8002:8002"
    environment:
      - PORT=8002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=myapp
      - DB_SSL=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - bun-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bun", "run", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  express-service:
    image: ghcr.io/data-repository/express-service:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./apps/express-service/Dockerfile
    container_name: express-service
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=myapp
      - DB_SSL=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - bun-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bun", "run", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Rest of the services remain the same...
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    container_name: myapp-db
    shm_size: 256MB
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: myapp
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d myapp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "6432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bun-network
    command: ["postgres", "-c", "max_connections=100", "-c", "shared_buffers=256MB"]

  redis:
    image: redis:7-alpine
    container_name: myapp-redis
    restart: unless-stopped
    ports:
      - "7379:6379"
    networks:
      - bun-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
    name: myapp_postgres_data
  redis_data:
    name: myapp_redis_data

networks:
  bun-network:
    name: myapp_network